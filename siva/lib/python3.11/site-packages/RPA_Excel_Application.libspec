<?xml version="1.0" encoding="UTF-8"?>
<keywordspec name="RPA.Excel.Application" type="LIBRARY" format="REST" scope="GLOBAL" generated="2024-04-02T13:03:34+00:00" specversion="5" source="./RPA/Excel/Application.py" lineno="83">
<version/>
<doc>`Excel.Application` is a library for controlling the Excel application.

**Examples**

**Robot Framework**

.. code-block:: robotframework

    *** Settings ***
    Library             RPA.Excel.Application
    Task Setup          Open Application
    Task Teardown       Quit Application

    *** Tasks ***
    Manipulate Excel application
        Open Workbook           workbook.xlsx
        Set Active Worksheet    sheetname=new stuff
        Write To Cells          row=1
        ...                     column=1
        ...                     value=my data
        Save Excel

    Run Excel Macro
        Open Workbook   orders_with_macro.xlsm
        Run Macro       Sheet1.CommandButton1_Click

    Export Workbook as PDF
        Open Workbook           workbook.xlsx
        Export as PDF           workbook.pdf

**Python**

.. code-block:: python

    from RPA.Excel.Application import Application

    app = Application()

    app.open_application()
    app.open_workbook('workbook.xlsx')
    app.set_active_worksheet(sheetname='new stuff')
    app.write_to_cells(row=1, column=1, value='new data')
    app.save_excel()
    app.quit_application()

**Caveats**

This library works on a Windows operating system with UI enabled only, and you must
ensure that you open the app first with ``Open Application`` before running any
other relevant keyword which requires to operate on an open app. The application is
automatically closed at the end of the task execution, so this can be changed by
importing the library with the `autoexit=${False}` setting.

.. code-block:: robotframework

    *** Settings ***
    Library     RPA.Excel|Outlook|Word.Application    autoexit=${False}

If you're running the Process by Control Room through a custom self-hosted Worker
service, then please make sure that you enable an RDP session by ticking "Use
Desktop Connection" under the Step configuration.

If you still encounter issues with opening a document, please ensure that file can
be opened first manually and dismiss any alert potentially blocking the process.

Check the documentation below for more info:

- https://robocorp.com/docs/control-room/unattended/worker-setups/windows-desktop
- https://robocorp.com/docs/faq/windows-server-2016</doc>
<tags>
</tags>
<inits>
<init name="__init__" lineno="132">
<arguments repr="*args, **kwargs">
<arg kind="VAR_POSITIONAL" required="false" repr="*args">
<name>args</name>
</arg>
<arg kind="VAR_NAMED" required="false" repr="**kwargs">
<name>kwargs</name>
</arg>
</arguments>
<doc>Initialize the library instance by wrapping the COM Windows app.

:param autoexit: Automatically close the app when the process finishes.</doc>
<shortdoc>Initialize the library instance by wrapping the COM Windows app.</shortdoc>
</init>
</inits>
<keywords>
<kw name="Add New Sheet" lineno="193">
<arguments repr="sheetname: str, create_workbook: bool = True">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="sheetname: str">
<name>sheetname</name>
<type name="str" typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="create_workbook: bool = True">
<name>create_workbook</name>
<type name="bool" typedoc="boolean">bool</type>
<default>True</default>
</arg>
</arguments>
<doc>Add new worksheet to workbook. Workbook is created by default if
it does not exist.

:param sheetname: name for sheet
:param create_workbook: create workbook if True, defaults to True
:raises ValueError: error is raised if workbook does not exist and
    `create_workbook` is False</doc>
<shortdoc>Add new worksheet to workbook. Workbook is created by default if it does not exist.</shortdoc>
</kw>
<kw name="Add New Workbook" lineno="146">
<arguments repr="">
</arguments>
<doc>Adds new workbook for Excel application</doc>
<shortdoc>Adds new workbook for Excel application</shortdoc>
</kw>
<kw name="Close Document" source="./RPA/application.py" lineno="174">
<arguments repr="save_changes: bool = False">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="save_changes: bool = False">
<name>save_changes</name>
<type name="bool" typedoc="boolean">bool</type>
<default>False</default>
</arg>
</arguments>
<doc>Close the active document and app (if open).

:param save_changes: Enable changes saving on quit. (`False` by default)</doc>
<shortdoc>Close the active document and app (if open).</shortdoc>
</kw>
<kw name="Create Pivot Field" lineno="379">
<arguments repr="data_column: str, operation: str, numberformat: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="data_column: str">
<name>data_column</name>
<type name="str" typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="operation: str">
<name>operation</name>
<type name="str" typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="numberformat: str | None = None">
<name>numberformat</name>
<type name="Union" union="true">str | None<type name="str" typedoc="string">str</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
</arguments>
<doc>Create pivot field object parameters.

*Note.* At the moment operation "DISTINCT COUNT" is not
supported as there seems to be issues in the COM interface,
which have not been resolved yet (regarding this library
implementation).

Python example:

.. code-block:: python

    field_count = excel.create_pivot_field("price", "count", "#")
    field_avg = excel.create_pivot_field("price", "average", "#0,#0")

Robot Framework example:

.. code-block:: robotframework

    ${field_sum}=    Create Pivot Field    price    sum    #,#0
    ${field_max}=    Create Pivot Field    price    max    #,#0

:param data_column: name of the data column
:param operation: name of the possible operations
 (SUM, AVERAGE, MAX, MIN, COUNT)
:param numberformat: Excel cell number format, by default
 number format is not set for the field
:return: field object</doc>
<shortdoc>Create pivot field object parameters.</shortdoc>
</kw>
<kw name="Create Pivot Table" lineno="415">
<arguments repr="source_worksheet: str, pivot_worksheet: str, rows: List[str], fields: List[PivotField], sort_field: PivotField | None = None, sort_direction: str = descending, data_range: Any | None = None, pivot_name: str = PivotTable1, collapse_rows: bool = True, show_grand_total: bool = True">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="source_worksheet: str">
<name>source_worksheet</name>
<type name="str" typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="pivot_worksheet: str">
<name>pivot_worksheet</name>
<type name="str" typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="rows: List[str]">
<name>rows</name>
<type name="List" typedoc="list">List[str]<type name="str" typedoc="string">str</type></type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="fields: List[PivotField]">
<name>fields</name>
<type name="List" typedoc="list">List[PivotField]<type name="PivotField">PivotField</type></type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="sort_field: PivotField | None = None">
<name>sort_field</name>
<type name="Union" union="true">PivotField | None<type name="PivotField">PivotField</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="sort_direction: str = descending">
<name>sort_direction</name>
<type name="str" typedoc="string">str</type>
<default>descending</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="data_range: Any | None = None">
<name>data_range</name>
<type name="Union" union="true">Any | None<type name="Any" typedoc="Any">Any</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="pivot_name: str = PivotTable1">
<name>pivot_name</name>
<type name="str" typedoc="string">str</type>
<default>PivotTable1</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="collapse_rows: bool = True">
<name>collapse_rows</name>
<type name="bool" typedoc="boolean">bool</type>
<default>True</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="show_grand_total: bool = True">
<name>show_grand_total</name>
<type name="bool" typedoc="boolean">bool</type>
<default>True</default>
</arg>
</arguments>
<doc>Create a pivot table in the specified worksheet.

This is a initial implementation of the pivot table creation,
which might not work in all cases. The alternative way
of creating pivot tables is to use a macro an run it.

Python example:

.. code-block:: python

    rows = ["products", "expense_type"]
    field_count = excel.create_pivot_field("price", "count", "#")
    field_avg = excel.create_pivot_field("price", "average", "#0,#0")
    pivottable = excel.create_pivot_table(
        source_worksheet="data",
        pivot_worksheet="test!R5C5",
        rows=rows,
        fields=[field_count, field_avg]
    )

Robot Framework example:

.. code-block:: robotframework

    @{rows}=    Create List    products    expense_type
    ${field_sum}=    Create Pivot Field    price    sum    #,#0
    ${field_max}=    Create Pivot Field    price    max    #,#0
    @{fields}=   Create List   ${field_sum}    ${field_max}
    ${pivottable}=    Create Pivot Table
    ...    source_worksheet=data
    ...    pivot_worksheet=test!R5C5
    ...    rows=${rows}
    ...    fields=${fields}

:param source_worksheet: name of the source worksheet
:param pivot_worksheet: name of the pivot worksheet, can
 be the same as the source worksheet but then cell location
 of the pivot table needs to be given in the format "R1C1"
 (R is a column numbe and C is a row number, e.g. "R1C1" is A1)
:param rows: columns in the `source_worksheet` which are used
 as pivot table rows
:param fields: columns for the pivot table data fields
:param sort_field: field to sort the pivot table by (one of the
 `fields`)
:param sort_direction: sort direction (ascending or descending),
 default is descending
:param data_range: source data range, if not given then
 the whole used range of `source_worksheet` will be used
:param pivot_name: name of the pivot table, if not given
 then the name is "PivotTable1"
:param collapse_rows: if `True` then the first row will be collapsed
:param show_grand_total: if `True` then the grand total will be shown
 for the columns
:return: created `PivotTable` object</doc>
<shortdoc>Create a pivot table in the specified worksheet.</shortdoc>
</kw>
<kw name="Create Table" lineno="647">
<arguments repr="table_name: str, table_range: Any | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="table_name: str">
<name>table_name</name>
<type name="str" typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="table_range: Any | None = None">
<name>table_range</name>
<type name="Union" union="true">Any | None<type name="Any" typedoc="Any">Any</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
</arguments>
<doc>Create a table in the current worksheet.

:param table_name: name for the table
:param table_range: source table range, if not given then
 the whole used range of `source_worksheet` will be used</doc>
<shortdoc>Create a table in the current worksheet.</shortdoc>
</kw>
<kw name="Export As Pdf" lineno="361">
<arguments repr="pdf_filename: str, excel_filename: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="pdf_filename: str">
<name>pdf_filename</name>
<type name="str" typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="excel_filename: str | None = None">
<name>excel_filename</name>
<type name="Union" union="true">str | None<type name="str" typedoc="string">str</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
</arguments>
<doc>Export Excel as PDF file

If Excel filename is not given, the currently open workbook
will be exported as PDF.

:param pdf_filename: PDF filename to save
:param excel_filename: Excel filename to open</doc>
<shortdoc>Export Excel as PDF file</shortdoc>
</kw>
<kw name="Find" lineno="563">
<arguments repr="search_string: str, search_range: Any | None = None, max_results: int | None = None, search_order: SearchOrder = ROWS, match_case: bool = False">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="search_string: str">
<name>search_string</name>
<type name="str" typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="search_range: Any | None = None">
<name>search_range</name>
<type name="Union" union="true">Any | None<type name="Any" typedoc="Any">Any</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="max_results: int | None = None">
<name>max_results</name>
<type name="Union" union="true">int | None<type name="int" typedoc="integer">int</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="search_order: SearchOrder = ROWS">
<name>search_order</name>
<type name="SearchOrder" typedoc="SearchOrder">SearchOrder</type>
<default>ROWS</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="match_case: bool = False">
<name>match_case</name>
<type name="bool" typedoc="boolean">bool</type>
<default>False</default>
</arg>
</arguments>
<doc>Keyword for finding text in the current worksheet.

Wildcard can be used in a search string. The asterisk (*) represents
any series of characters, and the question mark (?) represents a single
character.

Python example:

.. code-block:: python

    ranges = excel.find("32.145.???.1", "IP!E1:E9999", 6)
    for r in ranges:
        print(f"ADDR = {r.Address} VALUE = {r.Value}")
        r.Value = r.Value.replace("32.145.", "192.168.")
        r.BorderAround()

Robot Framework example:

.. code-block:: robotframework

    ${ranges}=    Find
    ...    search_string=32.145.*
    ...    search_range=IP!A1:A9999
    ...    max_results=6
    ...    search_order=COLUMNS

    FOR    ${ranges}    IN    @{ranges}
        ${value}=    Set Variable    ${range.Value}
        Log to console    ADDR = ${range.Address} VALUE = ${value}
        ${new_value}=    Replace String    ${value}    32.145.    192.168.
        Set Object Property    ${range}    Value    ${new_value}
        Call Method    ${range}    BorderAround
    END

:param search_string: what to search for
:param search_range: if not given will search the current
 worksheet
:param max_results: can be used to limit number of results
:param search_order: by default search is executed by ROWS,
 can be changed to COLUMNS
:param match_case: if `True` then the search is case sensitive
:return: list of `Range` objects</doc>
<shortdoc>Keyword for finding text in the current worksheet.</shortdoc>
</kw>
<kw name="Find First Available Cell" lineno="227">
<arguments repr="worksheet: Any = None, row: int = 1, column: int = 1">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="worksheet: Any = None">
<name>worksheet</name>
<type name="Any" typedoc="Any">Any</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="row: int = 1">
<name>row</name>
<type name="int" typedoc="integer">int</type>
<default>1</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="column: int = 1">
<name>column</name>
<type name="int" typedoc="integer">int</type>
<default>1</default>
</arg>
</arguments>
<doc>Find first available free cell

:param worksheet: worksheet to handle, defaults to active worksheet if None
:param row: starting row for search, defaults to 1
:param column: starting column for search, defaults to 1
:return: tuple (row, column) or (None, None) if not found</doc>
<shortdoc>Find first available free cell</shortdoc>
</kw>
<kw name="Find First Available Row" lineno="213">
<arguments repr="worksheet: Any | None = None, row: int = 1, column: int = 1">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="worksheet: Any | None = None">
<name>worksheet</name>
<type name="Union" union="true">Any | None<type name="Any" typedoc="Any">Any</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="row: int = 1">
<name>row</name>
<type name="int" typedoc="integer">int</type>
<default>1</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="column: int = 1">
<name>column</name>
<type name="int" typedoc="integer">int</type>
<default>1</default>
</arg>
</arguments>
<doc>Find first available free row

:param worksheet: worksheet to handle, defaults to active worksheet if None
:param row: starting row for search, defaults to 1
:param column: starting column for search, defaults to 1
:return: row or None</doc>
<shortdoc>Find first available free row</shortdoc>
</kw>
<kw name="Get Pivot Tables" lineno="711">
<arguments repr="pivot_table_name: str | None = None, as_list: bool = True">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="pivot_table_name: str | None = None">
<name>pivot_table_name</name>
<type name="Union" union="true">str | None<type name="str" typedoc="string">str</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="as_list: bool = True">
<name>as_list</name>
<type name="bool" typedoc="boolean">bool</type>
<default>True</default>
</arg>
</arguments>
<doc>Return pivot tables in the current worksheet.

Python example:

.. code-block:: python

    from RPA.Tables import Tables

    pivot_tables = excel.get_pivot_tables()

    for tbl_name, tbl_list in pivot_tables.items():
        print(f"TABLE NAME: {tbl_name}")
        table = Tables().create_table(data=tbl_list[1:], columns=tbl_list[0])
        print(table)

Robot Framework example:

.. code-block:: robotframework

    ${pivots}=    Get Pivot Tables
    FOR    ${tablename}    ${pivot}    IN    &amp;{pivots}
        Log To Console    ${tablename}
        ${table}=    RPA.Tables.Create Table
        ...   data=${{$pivot[1:]}}
        ...   columns=${{$pivot[0]}}
        Log To Console    ${table}
    END

:param pivot_table_name: name of the pivot table to return,
 will return by default all pivot tables
:param as_list: if `True` then the pivot table data is returned as list
 of lists, if `False` then the data is returned as list of `Range` objects
:return: dictionary of pivot tables (names as keys and table data as values)</doc>
<shortdoc>Return pivot tables in the current worksheet.</shortdoc>
</kw>
<kw name="Get Range" lineno="676">
<arguments repr="table_range: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="table_range: str">
<name>table_range</name>
<type name="str" typedoc="string">str</type>
</arg>
</arguments>
<doc>Get range object for the given range address.

These object properties and methods can be then called.

Python example:

.. code-block:: python

    source = excel.get_range('A1:B2')
    for r in source:
        print(f"ADDR = {r.Address} VAL = {r.Value}")
        r.BorderAround()
    source.Merge()
    # Creating a formula and copying it to another range
    excel.get_range("E4").Formula = "=SUM(C4:D4)"
    destination = excel.get_range("E5:E10")
    excel.get_range("E4").Copy(destination)

Robot Framework example:

.. code-block:: robotframework

    ${range}=    Get Range    data!A1:A4
    FOR    ${r}    IN    @{range}
        Log To Console    ADDR = ${r.Address} VAL = ${r.Value}
        Call Method  ${r}    BorderAround
    END
    Call Method    ${range}    Merge

:param table_range: range to return
:return: range object</doc>
<shortdoc>Get range object for the given range address.</shortdoc>
</kw>
<kw name="List Tables" lineno="669">
<arguments repr="">
</arguments>
<doc>Return tables in the current worksheet.

:return: list of table names</doc>
<shortdoc>Return tables in the current worksheet.</shortdoc>
</kw>
<kw name="Merge Range" lineno="876">
<arguments repr="initial_range: Any">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="initial_range: Any">
<name>initial_range</name>
<type name="Any" typedoc="Any">Any</type>
</arg>
</arguments>
<doc>Merges a range of cells.

:param initial_range: range of cells to merge</doc>
<shortdoc>Merges a range of cells.</shortdoc>
</kw>
<kw name="Open Application" source="./RPA/application.py" lineno="135">
<arguments repr="visible: bool = False, display_alerts: bool = False">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="visible: bool = False">
<name>visible</name>
<type name="bool" typedoc="boolean">bool</type>
<default>False</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="display_alerts: bool = False">
<name>display_alerts</name>
<type name="bool" typedoc="boolean">bool</type>
<default>False</default>
</arg>
</arguments>
<doc>Open the application.

:param visible: Show the window on opening. (`False` by default)
:param display_alerts: Display alert popups. (`False` by default)</doc>
<shortdoc>Open the application.</shortdoc>
</kw>
<kw name="Open Workbook" lineno="151">
<arguments repr="filename: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="filename: str">
<name>filename</name>
<type name="str" typedoc="string">str</type>
</arg>
</arguments>
<doc>Open Excel by filename

By default sets active worksheet to sheet number 1

:param filename: path to filename</doc>
<shortdoc>Open Excel by filename</shortdoc>
</kw>
<kw name="Quit Application" source="./RPA/application.py" lineno="199">
<arguments repr="save_changes: bool = False">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="save_changes: bool = False">
<name>save_changes</name>
<type name="bool" typedoc="boolean">bool</type>
<default>False</default>
</arg>
</arguments>
<doc>Quit the application.

:param save_changes: Enable to save changes on quit. (`False` by default)</doc>
<shortdoc>Quit the application.</shortdoc>
</kw>
<kw name="Read From Cells" lineno="285">
<arguments repr="worksheet: Any = None, row: int = None, column: int = None">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="worksheet: Any = None">
<name>worksheet</name>
<type name="Any" typedoc="Any">Any</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="row: int = None">
<name>row</name>
<type name="int" typedoc="integer">int</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="column: int = None">
<name>column</name>
<type name="int" typedoc="integer">int</type>
<default>None</default>
</arg>
</arguments>
<doc>Read value from cell.

:param worksheet: worksheet to handle, defaults to active worksheet if None
:param row: target row, defaults to None
:param column: target row, defaults to None
:raises ValueError: if cell is not given</doc>
<shortdoc>Read value from cell.</shortdoc>
</kw>
<kw name="Remove Hidden Columns And Rows" lineno="840">
<arguments repr="initial_range: Any, worksheet: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="initial_range: Any">
<name>initial_range</name>
<type name="Any" typedoc="Any">Any</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="worksheet: str | None = None">
<name>worksheet</name>
<type name="Union" union="true">str | None<type name="str" typedoc="string">str</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
</arguments>
<doc>Removes hidden columns and rows from a range and returns a new range.

:param initial_range: range of cells to remove hidden columns and rows from
:param worksheet: set active worksheet (name) before removing hidden
 columns and rows
:return: new range or initial range if no hidden cells found</doc>
<shortdoc>Removes hidden columns and rows from a range and returns a new range.</shortdoc>
</kw>
<kw name="Run Macro" lineno="352">
<arguments repr="macro_name: str, *args: Any">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="macro_name: str">
<name>macro_name</name>
<type name="str" typedoc="string">str</type>
</arg>
<arg kind="VAR_POSITIONAL" required="false" repr="*args: Any">
<name>args</name>
<type name="Any" typedoc="Any">Any</type>
</arg>
</arguments>
<doc>Run Excel macro with given name

:param macro_name: macro to run
:param args: arguments to pass to macro</doc>
<shortdoc>Run Excel macro with given name</shortdoc>
</kw>
<kw name="Save Excel" lineno="309">
<arguments repr="">
</arguments>
<doc>Saves Excel file</doc>
<shortdoc>Saves Excel file</shortdoc>
</kw>
<kw name="Save Excel As" lineno="315">
<arguments repr="filename: str, autofit: bool = False, file_format=None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="filename: str">
<name>filename</name>
<type name="str" typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="autofit: bool = False">
<name>autofit</name>
<type name="bool" typedoc="boolean">bool</type>
<default>False</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="file_format=None">
<name>file_format</name>
<default>None</default>
</arg>
</arguments>
<doc>Save Excel with name if workbook is open

:param filename: where to save file
:param autofit: autofit cell widths if True, defaults to False
:param file_format: format of file

**Note:** Changing the file extension for the path does not
affect the actual format. To use an older format, use
the ``file_format`` argument with one of the following values:

https://docs.microsoft.com/en-us/office/vba/api/excel.xlfileformat

Examples:

.. code-block:: robotframework

    # Save workbook in modern format
    Save excel as    orders.xlsx

    # Save workbook in Excel 97 format (format from above URL)
    Save excel as    legacy.xls   file_format=${56}</doc>
<shortdoc>Save Excel with name if workbook is open</shortdoc>
</kw>
<kw name="Set Active Worksheet" lineno="179">
<arguments repr="sheetname: str = None, sheetnumber: int = None">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="sheetname: str = None">
<name>sheetname</name>
<type name="str" typedoc="string">str</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="sheetnumber: int = None">
<name>sheetnumber</name>
<type name="int" typedoc="integer">int</type>
<default>None</default>
</arg>
</arguments>
<doc>Set active worksheet by either its sheet number or name

:param sheetname: name of Excel sheet, defaults to None
:param sheetnumber: index of Excel sheet, defaults to None</doc>
<shortdoc>Set active worksheet by either its sheet number or name</shortdoc>
</kw>
<kw name="Set Object Property" source="./RPA/application.py" lineno="212">
<arguments repr="object_instance, property_name: str, value: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="object_instance">
<name>object_instance</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="property_name: str">
<name>property_name</name>
<type name="str" typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="value: str">
<name>value</name>
<type name="str" typedoc="string">str</type>
</arg>
</arguments>
<doc>Set the property of any object.

This is a utility keyword for Robot Framework syntax to set object
property values.

.. code-block:: robotframework

    ${new_value}=    Replace String    ${value}    10.132.    5511.11.
    Set Object Property    ${result}    Value    ${new_value}

:param object_instance: object instance to set the property
:param property_name: property name to set
:param value: value to set</doc>
<shortdoc>Set the property of any object.</shortdoc>
</kw>
<kw name="Unmerge Range" lineno="864">
<arguments repr="initial_range: Any">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="initial_range: Any">
<name>initial_range</name>
<type name="Any" typedoc="Any">Any</type>
</arg>
</arguments>
<doc>Unmerges a range of cells.

:param initial_range: range of cells to unmerge</doc>
<shortdoc>Unmerges a range of cells.</shortdoc>
</kw>
<kw name="Write Data To Range" lineno="770">
<arguments repr="target_range: Any, values: Table | List[List], log_warnings: bool = True">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="target_range: Any">
<name>target_range</name>
<type name="Any" typedoc="Any">Any</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="values: Table | List[List]">
<name>values</name>
<type name="Union" union="true">Table | List[List]<type name="Table">Table</type><type name="List" typedoc="list">List[List]<type name="List" typedoc="list">List</type></type></type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="log_warnings: bool = True">
<name>log_warnings</name>
<type name="bool" typedoc="boolean">bool</type>
<default>True</default>
</arg>
</arguments>
<doc>Writes data to the specified range(s) in the Excel worksheet.

The range width should match the number of columns in the data.

Multiple ranges can be specified by separating them with a semicolon, but
still the total width of ranges should match the number of columns in the data.

Python example:

.. code-block:: python

    from RPA.Tables import Tables
    from RPA.Excel.Application import Application

    excel = Application()

    table = Tables().read_table_from_csv("input.csv", header=True)
    excel.open_workbook("result.xslx)
    excel.write_data_to_range("A2:P100", table)

Robot Framework example:

.. code-block:: robotframework

    ${input_table}=    Read table from CSV    input.csv    header=True
    Open Workbook      result.xlsx
    Write Data To Range    A2:L21    ${input_table}   # Single range
    Write Data To Range    C2:E21;G2:I21    ${input_table}   # Multiple ranges

:param target_range: A1 string presentation of the range(s) to write or
 Range object.
:param values: `Table` or list of lists to write to the range(s).
:param log_warnings: on `False` will suppress logging warning, default
 is `True` (warnings are logged)</doc>
<shortdoc>Writes data to the specified range(s) in the Excel worksheet.</shortdoc>
</kw>
<kw name="Write To Cells" lineno="249">
<arguments repr="worksheet: Any = None, row: int = None, column: int = None, value: str = None, number_format: str = None, formula: str = None">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="worksheet: Any = None">
<name>worksheet</name>
<type name="Any" typedoc="Any">Any</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="row: int = None">
<name>row</name>
<type name="int" typedoc="integer">int</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="column: int = None">
<name>column</name>
<type name="int" typedoc="integer">int</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="value: str = None">
<name>value</name>
<type name="str" typedoc="string">str</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="number_format: str = None">
<name>number_format</name>
<type name="str" typedoc="string">str</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="formula: str = None">
<name>formula</name>
<type name="str" typedoc="string">str</type>
<default>None</default>
</arg>
</arguments>
<doc>Write value, number_format and/or formula into cell.

:param worksheet: worksheet to handle, defaults to active worksheet if None
:param row: target row, defaults to None
:param column: target row, defaults to None
:param value: possible value to set, defaults to None
:param number_format: possible number format to set, defaults to None
:param formula: possible format to set, defaults to None
:raises ValueError: if cell is not given</doc>
<shortdoc>Write value, number_format and/or formula into cell.</shortdoc>
</kw>
</keywords>
<datatypes>
<enums>
<enum name="SearchOrder">
<doc>Enumeration for search order.</doc>
<members>
<member name="ROWS" value="ROWS"/>
<member name="COLUMNS" value="COLUMNS"/>
</members>
</enum>
</enums>
</datatypes>
<typedocs>
<type name="Any" type="Standard">
<doc>Any value is accepted. No conversion is done.
</doc>
<accepts>
<type>Any</type>
</accepts>
<usages>
<usage>Create Pivot Table</usage>
<usage>Create Table</usage>
<usage>Find</usage>
<usage>Find First Available Cell</usage>
<usage>Find First Available Row</usage>
<usage>Merge Range</usage>
<usage>Read From Cells</usage>
<usage>Remove Hidden Columns And Rows</usage>
<usage>Run Macro</usage>
<usage>Unmerge Range</usage>
<usage>Write Data To Range</usage>
<usage>Write To Cells</usage>
</usages>
</type>
<type name="boolean" type="Standard">
<doc>Strings ``TRUE``, ``YES``, ``ON`` and ``1`` are converted to Boolean ``True``,
the empty string as well as strings ``FALSE``, ``NO``, ``OFF`` and ``0``
are converted to Boolean ``False``, and the string ``NONE`` is converted
to the Python ``None`` object. Other strings and other accepted values are
passed as-is, allowing keywords to handle them specially if
needed. All string comparisons are case-insensitive.

Examples: ``TRUE`` (converted to ``True``), ``off`` (converted to ``False``),
``example`` (used as-is)
</doc>
<accepts>
<type>string</type>
<type>integer</type>
<type>float</type>
<type>None</type>
</accepts>
<usages>
<usage>Add New Sheet</usage>
<usage>Close Document</usage>
<usage>Create Pivot Table</usage>
<usage>Find</usage>
<usage>Get Pivot Tables</usage>
<usage>Open Application</usage>
<usage>Quit Application</usage>
<usage>Save Excel As</usage>
<usage>Write Data To Range</usage>
</usages>
</type>
<type name="integer" type="Standard">
<doc>Conversion is done using Python's [https://docs.python.org/library/functions.html#int|int]
built-in function. Floating point
numbers are accepted only if they can be represented as integers exactly.
For example, ``1.0`` is accepted and ``1.1`` is not.

Starting from RF 4.1, it is possible to use hexadecimal, octal and binary
numbers by prefixing values with ``0x``, ``0o`` and ``0b``, respectively.

Starting from RF 4.1, spaces and underscores can be used as visual separators
for digit grouping purposes.

Examples: ``42``, ``-1``, ``0b1010``, ``10 000 000``, ``0xBAD_C0FFEE``
</doc>
<accepts>
<type>string</type>
<type>float</type>
</accepts>
<usages>
<usage>Find</usage>
<usage>Find First Available Cell</usage>
<usage>Find First Available Row</usage>
<usage>Read From Cells</usage>
<usage>Set Active Worksheet</usage>
<usage>Write To Cells</usage>
</usages>
</type>
<type name="list" type="Standard">
<doc>Strings must be Python [https://docs.python.org/library/stdtypes.html#list|list]
literals. They are converted to actual lists using the
[https://docs.python.org/library/ast.html#ast.literal_eval|ast.literal_eval]
function. They can contain any values ``ast.literal_eval`` supports, including
lists and other containers.

If the type has nested types like ``list[int]``, items are converted
to those types automatically. This in new in Robot Framework 6.0.

Examples: ``['one', 'two']``, ``[('one', 1), ('two', 2)]``
</doc>
<accepts>
<type>string</type>
<type>Sequence</type>
</accepts>
<usages>
<usage>Create Pivot Table</usage>
<usage>Write Data To Range</usage>
</usages>
</type>
<type name="None" type="Standard">
<doc>String ``NONE`` (case-insensitive) is converted to Python ``None`` object.
Other values cause an error.
</doc>
<accepts>
<type>string</type>
</accepts>
<usages>
<usage>Create Pivot Field</usage>
<usage>Create Pivot Table</usage>
<usage>Create Table</usage>
<usage>Export As Pdf</usage>
<usage>Find</usage>
<usage>Find First Available Row</usage>
<usage>Get Pivot Tables</usage>
<usage>Remove Hidden Columns And Rows</usage>
</usages>
</type>
<type name="SearchOrder" type="Enum">
<doc>Enumeration for search order.</doc>
<accepts>
<type>string</type>
</accepts>
<usages>
<usage>Find</usage>
</usages>
<members>
<member name="ROWS" value="ROWS"/>
<member name="COLUMNS" value="COLUMNS"/>
</members>
</type>
<type name="string" type="Standard">
<doc>All arguments are converted to Unicode strings.</doc>
<accepts>
<type>Any</type>
</accepts>
<usages>
<usage>Add New Sheet</usage>
<usage>Create Pivot Field</usage>
<usage>Create Pivot Table</usage>
<usage>Create Table</usage>
<usage>Export As Pdf</usage>
<usage>Find</usage>
<usage>Get Pivot Tables</usage>
<usage>Get Range</usage>
<usage>Open Workbook</usage>
<usage>Remove Hidden Columns And Rows</usage>
<usage>Run Macro</usage>
<usage>Save Excel As</usage>
<usage>Set Active Worksheet</usage>
<usage>Set Object Property</usage>
<usage>Write To Cells</usage>
</usages>
</type>
</typedocs>
</keywordspec>
